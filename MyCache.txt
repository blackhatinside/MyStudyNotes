testschema.testtable

Hierarchical and recursive queries in SQL

PreparedStatement interface

PostgreSQL Database Architecture(YT)


-----
psql -U postgres
tswnciJ-
\c testdb;

-----


-----
make tables for { driver rider cab trip location }
create relationship between 2 tables

Conditions:
	drivers >= cabs
	boolean addDriver if 1 then insert, if 0 then delete
	boolean acceptTrip if 1 then insert, if 0 then delete
	boolean autoApproval if 1 then addDriver = 1, if 0 then addDriver = 0
Graph  - Locations/NodePoints:
	weights = distance
	cost = weight * base_rate
	Keys: Array of elements
	Values: Linked List
	triangular inequality: d(v) < d(u) + w(u,v)
		You add a new edge (u,v), you need to check if the triangular inequality holds:
		d(v) < d(u) + w(u,v)
		If it does, there is no new shortest path.
		Otherwise, you have a new shortest path from the source (A) to v, which invalidates all shortest paths with weight greater than the new d(v).

use switch case, try catch finally, assert, constants for repititive string
comparator sorting for taxi allocation priority 
first 5 kms fixed 100 Rs further for each 5 kms costs+= 10 Rs [5:100, 10:110, 15:120, 20]

-----

-----
        ArrayList<Integer> graph = new ArrayList<>();
        HashMap<String, Integer> dist = new HashMap<>();    // string = source + destination
        dist.putIfAbsent(String.valueOf(0 + "-" + 1), 1);
        dist.putIfAbsent(String.valueOf(0 + "-" + 4), 1);
        dist.putIfAbsent(String.valueOf(1 + "-" + 2), 1);
        dist.putIfAbsent(String.valueOf(1 + "-" + 3), 1);
        dist.putIfAbsent(String.valueOf(1 + "-" + 4), 1);
        dist.putIfAbsent(String.valueOf(2 + "-" + 3), 1);
        dist.putIfAbsent(String.valueOf(3 + "-" + 4), 1);
-----

-----
Connect to DB
pull all tables with Java

-----
Design a Call taxi booking application

-There are n number of taxi’s. For simplicity, assume 4. But it should work for any number of taxi’s.

-The are 6 points(A,B,C,D,E,F)

-All the points are in a straight line, and each point is 15kms away from the adjacent points.

-It takes 60 mins to travel from one point to another

-Each taxi charges Rs.100 minimum for the first 5 kilometers and Rs.10 for the subsequent kilometers.

-For simplicity, time can be entered as absolute time. Eg: 9hrs, 15hrs etc.

-All taxi’s are initially stationed at A.

-When a customer books a Taxi, a free taxi at that point is allocated

-If no free taxi is available at that point, a free taxi at the nearest point is allocated.

-If two taxi’s are free at the same point, one with lower earning is allocated

-Note that the taxi only charges the customer from the pickup point to the drop point. Not the distance it travels from an adjacent point to pickup the customer.

-If no taxi is free at that time, booking is rejected
-----

-----
	PreparedStatement preparedStatement = conn.prepareStatement(
	        "INSERT INTO bookingDetails"
	        + " VALUES (?, ?, ?, ?, ?, ?, ?);");
	preparedStatement.setInt(1, 1);     // taxiID
	preparedStatement.setInt(2, 1);     // bookingID
	preparedStatement.setString(3, String.valueOf('A'));    // fromWhere
	preparedStatement.setString(4, String.valueOf('C'));    // toWhere
	preparedStatement.setInt(5, 9);     // pickUpTime
	preparedStatement.setInt(6, 11);    // dropTime
	preparedStatement.setInt(7, 100);   // amount
	int rowsUpdated = preparedStatement.executeUpdate();
	System.out.println(rowsUpdated + " ROWS AFFECTED");
-----

-----

	login into system - admin/user
	book taxi / cancel taxi
		cancel: if no bookings, return 
		booking: if no cabs, move to waiting
		booking: if no cabs, and cabs in leave, cancel booking

pykid05@gmail.com
PyPy3K!dd0





Below is an aggregated evaluation of the three offers, taking into account factors such as CTC, growth, job stability, ease of switching, promotions, perks, work–life balance, and the difficulty of the job. (Note that the scores and rankings are based on qualitative assessments and may vary according to personal priorities.)

Estimated Ratings (Out of 5)
Factor	HCL Software (Full‑Stack SSE)	Convin.ai (Backend Developer)	C‑DOT (Scientist B)
CTC	5 (20 LPA – top-tier corporate)	5 (20 LPA – competitive startup)	5 (20 LPA – premium for role)
Growth	3 (Structured, moderate pace)	4.5 (Fast‑paced, high potential)	2 (Steady but slow)
Job Stability	4 (High – MNC backed)	3 (Moderate – inherent startup risk)	5 (Very high – public sector)
Switch/Mobility	4 (Strong brand aids switching)	3 (Somewhat flexible, but riskier externally)	2 (Low mobility)
Promotions	3 (Standard, gradual)	4 (Potentially rapid if growth succeeds)	2 (Slow, bureaucratic)
Perks	3.5 (Good corporate benefits)	4 (Attractive perks like course reimbursements, travel allowance)	3.5 (Solid public sector benefits)
Work–Life Balance	3.5 (Moderate to good)	2.5 (Often demanding, startup culture)	5 (Excellent balance)
Difficulty of Job	3 (Moderate – enterprise-scale challenges)	2 (High – fast-paced, high pressure)	3 (Moderate – research‑oriented)
(Each factor is scored out of 5; a higher score is better.)

Cumulative Scores
HCL Software: 5 + 3 + 4 + 4 + 3 + 3.5 + 3.5 + 3 = 29/40
Convin.ai: 5 + 4.5 + 3 + 3 + 4 + 4 + 2.5 + 2 = 28/40
C‑DOT: 5 + 2 + 5 + 2 + 2 + 3.5 + 5 + 3 = 27.5/40

